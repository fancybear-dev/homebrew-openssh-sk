name: Build and release

on:
  schedule:
    - cron: "0 0 * * *" # Run daily at midnight UTC
  workflow_dispatch: # Allow manual triggering
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Xcode Command Line Tools
        run: |
          if ! xcode-select -p &>/dev/null; then
            echo "Installing Xcode Command Line Tools..."
            xcode-select --install
            sudo xcode-select --switch /Library/Developer/CommandLineTools
          else
            echo "Xcode Command Line Tools already installed."
          fi

      - name: Install dependencies
        run: |
          brew update
          brew upgrade
          brew install libfido2 openssl autoconf automake libtool pkgconf

      - name: Clone OpenSSH portable repository
        run: |
          git clone https://github.com/openssh/openssh-portable.git

      - name: Build sk-libfido2.dylib
        working-directory: openssh-portable
        run: |
          autoreconf -i -v
          BREW_OPENSSL_PATH=$(ls -d /opt/homebrew/Cellar/openssl@3/*)
          BREW_LIBFIDO2_PATH=$(ls -d /opt/homebrew/Cellar/libfido2/*)
          export CFLAGS="-L$BREW_OPENSSL_PATH/lib -I$BREW_OPENSSL_PATH/include -L$BREW_LIBFIDO2_PATH/lib -I$BREW_LIBFIDO2_PATH/include -Wno-error=implicit-function-declaration"
          export LDFLAGS="-L$BREW_OPENSSL_PATH/lib -L$BREW_LIBFIDO2_PATH/lib"
          echo $CFLAGS
          echo $LDFLAGS
          ./configure --with-security-key-standalone
          make clean
          make
          mv sk-libfido2.dylib ../sk-libfido2.dylib

      - name: Extract OpenSSH version
        working-directory: openssh-portable
        id: extract-version
        run: |
          VERSION=$(grep '^#define SSH_VERSION' version.h | awk '{print $3}' | tr -d '"')
          echo "OPENSSH_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create or update release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract-version.outputs.OPENSSH_VERSION }}
          name: ${{ steps.extract-version.outputs.OPENSSH_VERSION }} - sk-libfido2.dylib
          body: |
            This release contains the `sk-libfido2.dylib` library compiled for macOS (Sonoma 14.0 or later) to enable hardware security key support (e.g., YubiKey) with the macOS built-in OpenSSH client.

            Built from OpenSSH portable source: https://github.com/openssh/openssh-portable
          draft: false
          prerelease: false
          files: sk-libfido2.dylib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate SHA256
        id: sha256
        run: |
          SHA=$(shasum -a 256 sk-libfido2.dylib | awk '{print $1}')
          echo "hash=$SHA" >> $GITHUB_OUTPUT

      - name: Create Cask directory
        run: mkdir -p Casks

      - name: Update Homebrew Cask
        run: |
          cat > Casks/openssh-sk.rb <<EOF
          cask "openssh-sk" do
            version "${{ steps.extract-version.outputs.OPENSSH_VERSION }}"
            sha256 "${{ steps.sha256.outputs.hash }}"

            url "https://github.com/${{ github.repository }}/releases/download/#{version}/sk-libfido2.dylib"
            name "OpenSSH SK Middleware"
            desc "Enables FIDO/U2F support for the native macOS OpenSSH client"
            homepage "https://github.com/${{ github.repository }}"

            livecheck do
              url :stable
              strategy :github_latest
            end

            artifact "sk-libfido2.dylib", target: "/usr/local/lib/sk-libfido2-fancybear-dev.dylib"

            caveats <<~EOS
              To enable the sk-libfido2-fancybear-dev library for SSH, you need to set the SSH_SK_PROVIDER environment variable.

              After installing this Cask, you can add the following line to your shell configuration file (e.g., ~/.zshenv or ~/.bash_profile):
                echo 'export SSH_SK_PROVIDER=/usr/local/lib/sk-libfido2-fancybear-dev.dylib' >> ~/.zshenv
              Before testing it out, either source the file or restart your terminal:
                source ~/.zshenv

              When running for the first time, Apple will refuse to execute it due to security mechanisms. 
              
              To allow the execution, select "Allow anyway" at "Settings" -> "Privacy & Security" -> "Security" (section below). 
              
              If the option is not available, ensure to first set "Allow applications from" to "App Store & Known Developers" at the same section.
            EOS

            uninstall delete: "/usr/local/lib/sk-libfido2-fancybear-dev.dylib"
          end
          EOF

      - name: Commit and push Cask
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update Homebrew Cask to version ${{ steps.extract-version.outputs.OPENSSH_VERSION }}"
          file_pattern: Casks/openssh-sk.rb
